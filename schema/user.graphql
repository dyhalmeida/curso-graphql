type User {
  id: ID!
  name: String!
  email: String
  age: Int!
  token: String
  profiles: [Profile]
}

input PublicUserInsertInput {
  name: String!
  email: String!
  age: Int!
  password: String!
}

input UserInsertInput {
  name: String!
  email: String!
  age: Int!
  password: String!
  profiles: [ProfileFilters]
}

input UserUpdateInput {
  name: String
  email: String
  age: Int
  password: String
  profiles: [ProfileFilters]
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserFilters {
  id: ID
  email: String
}

extend type Query {
  login(data: UserLoginInput!): User
  users: [User!]
  user(filters: UserFilters!): User
}

extend type Mutation {
  createPublicUser(data: PublicUserInsertInput!): User!
  createUser(data: UserInsertInput!): User!
  deleteUser(filters: UserFilters): User
  updateUser(filters: UserFilters, data: UserUpdateInput!): User
}